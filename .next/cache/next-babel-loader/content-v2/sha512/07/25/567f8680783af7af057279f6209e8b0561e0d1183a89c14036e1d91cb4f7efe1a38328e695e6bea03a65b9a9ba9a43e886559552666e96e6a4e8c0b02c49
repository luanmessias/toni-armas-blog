{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luanmessias/dev/toni-armas-blog/src/context/DarkMode.tsx\";\nimport React, { createContext, useState, useContext } from 'react';\nconst DarkModeContext = /*#__PURE__*/createContext(null);\n\nconst DarkModeProvider = ({\n  children\n}) => {\n  const {\n    0: darkMode,\n    1: setDarkMode\n  } = useState(true);\n  return /*#__PURE__*/_jsxDEV(DarkModeContext.Provider, {\n    value: {\n      darkMode,\n      setDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\nconst useDarkModeContext = () => {\n  const context = useContext(DarkModeContext);\n  if (!context) throw new Error('useDarkMode must be used within a DarkModeProviders');\n  return context;\n};\n\nexport { useDarkModeContext, DarkModeProvider };","map":{"version":3,"sources":["/home/luanmessias/dev/toni-armas-blog/src/context/DarkMode.tsx"],"names":["React","createContext","useState","useContext","DarkModeContext","DarkModeProvider","children","darkMode","setDarkMode","useDarkModeContext","context","Error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AAWA,MAAMC,eAAe,gBAAGH,aAAa,CAAqB,IAArB,CAArC;;AAEA,MAAMI,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmD;AAC1E,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,IAAD,CAAxC;AAEA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAjC;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CARD;;AAUA,MAAMG,kBAAkB,GAAG,MAAmB;AAC5C,QAAMC,OAAO,GAAGP,UAAU,CAACC,eAAD,CAA1B;AACA,MAAI,CAACM,OAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACF,SAAOD,OAAP;AACD,CALD;;AAOA,SAASD,kBAAT,EAA6BJ,gBAA7B","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\n\ntype ChildrenPropTtypes = {\n  children: React.ReactNode\n}\n\ntype ContextType = {\n  darkMode: boolean\n  setDarkMode: (darkMode: boolean) => void\n}\n\nconst DarkModeContext = createContext<ContextType | null>(null)\n\nconst DarkModeProvider = ({ children }: ChildrenPropTtypes): JSX.Element => {\n  const [darkMode, setDarkMode] = useState(true)\n\n  return (\n    <DarkModeContext.Provider value={{ darkMode, setDarkMode }}>\n      {children}\n    </DarkModeContext.Provider>\n  )\n}\n\nconst useDarkModeContext = (): ContextType => {\n  const context = useContext(DarkModeContext)\n  if (!context)\n    throw new Error('useDarkMode must be used within a DarkModeProviders')\n  return context\n}\n\nexport { useDarkModeContext, DarkModeProvider }\n"]},"metadata":{},"sourceType":"module"}