{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/luanmessias/dev/toni-armas-blog/src/context/MobileMenu.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext } from 'react';\nvar MobileMenuContext = /*#__PURE__*/createContext(null);\n\nvar MobileMenuProvider = function MobileMenuProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      mobileMenu = _useState[0],\n      setMobileMenu = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MobileMenuContext.Provider, {\n      value: {\n        mobileMenu: mobileMenu,\n        setMobileMenu: setMobileMenu\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(MobileMenuProvider, \"zVreJlCT2l+Us0hWypm27YF2fEc=\");\n\n_c = MobileMenuProvider;\n\nvar useMobileMenuContext = function useMobileMenuContext() {\n  _s2();\n\n  var context = useContext(MobileMenuContext);\n  if (!context) throw new Error('useMobileMenu must be used within a MobileMenuProviders');\n  return context;\n};\n\n_s2(useMobileMenuContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { useMobileMenuContext, MobileMenuProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MobileMenuProvider\");","map":{"version":3,"sources":["/home/luanmessias/dev/toni-armas-blog/src/context/MobileMenu.tsx"],"names":["React","createContext","useState","useContext","MobileMenuContext","MobileMenuProvider","children","mobileMenu","setMobileMenu","useMobileMenuContext","context","Error"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AAWA,IAAMC,iBAAiB,gBAAGH,aAAa,CAAqB,IAArB,CAAvC;;AAEA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,OAAmD;AAAA;;AAAA,MAAhDC,QAAgD,QAAhDA,QAAgD;;AAAA,kBACxCJ,QAAQ,CAAC,KAAD,CADgC;AAAA,MACrEK,UADqE;AAAA,MACzDC,aADyD;;AAG5E,sBACE;AAAA,2BACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAE;AAAED,QAAAA,UAAU,EAAVA,UAAF;AAAcC,QAAAA,aAAa,EAAbA;AAAd,OAAnC;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,CAVD;;GAAMD,kB;;KAAAA,kB;;AAYN,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAmB;AAAA;;AAC9C,MAAMC,OAAO,GAAGP,UAAU,CAACC,iBAAD,CAA1B;AACA,MAAI,CAACM,OAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACF,SAAOD,OAAP;AACD,CALD;;IAAMD,oB;;AAON,SAASA,oBAAT,EAA+BJ,kBAA/B","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\n\ntype ChildrenPropTtypes = {\n  children: React.ReactNode\n}\n\ntype ContextType = {\n  mobileMenu: boolean\n  setMobileMenu: (darkMode: boolean) => void\n}\n\nconst MobileMenuContext = createContext<ContextType | null>(null)\n\nconst MobileMenuProvider = ({ children }: ChildrenPropTtypes): JSX.Element => {\n  const [mobileMenu, setMobileMenu] = useState(false)\n\n  return (\n    <>\n      <MobileMenuContext.Provider value={{ mobileMenu, setMobileMenu }}>\n        {children}\n      </MobileMenuContext.Provider>\n    </>\n  )\n}\n\nconst useMobileMenuContext = (): ContextType => {\n  const context = useContext(MobileMenuContext)\n  if (!context)\n    throw new Error('useMobileMenu must be used within a MobileMenuProviders')\n  return context\n}\n\nexport { useMobileMenuContext, MobileMenuProvider }\n"]},"metadata":{},"sourceType":"module"}